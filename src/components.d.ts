/**
 * This is an autogenerated file created by the Stencil build process.
 * It contains typing information for all components that exist in this project
 * and imports for stencil collections that might be configured in your stencil.config.js file
 */

import '@stencil/core';

declare global {
  namespace JSX {
    interface Element {}
    export interface IntrinsicElements {}
  }
  namespace JSXElements {}

  interface HTMLStencilElement extends HTMLElement {
    componentOnReady(): Promise<this>;
    componentOnReady(done: (ele?: this) => void): void;

    forceUpdate(): void;
  }

  interface HTMLAttributes {}
}


declare global {

  namespace StencilComponents {
    interface PwnedPassword {
      'errorMessage': string;
      'inputClass': string;
      'inputId': string;
      'inputMinLength': number;
      'inputName': string;
      'inputPattern': string;
      'inputPlaceholder': string;
    }
  }

  interface HTMLPwnedPasswordElement extends StencilComponents.PwnedPassword, HTMLStencilElement {}

  var HTMLPwnedPasswordElement: {
    prototype: HTMLPwnedPasswordElement;
    new (): HTMLPwnedPasswordElement;
  };
  interface HTMLElementTagNameMap {
    'pwned-password': HTMLPwnedPasswordElement;
  }
  interface ElementTagNameMap {
    'pwned-password': HTMLPwnedPasswordElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'pwned-password': JSXElements.PwnedPasswordAttributes;
    }
  }
  namespace JSXElements {
    export interface PwnedPasswordAttributes extends HTMLAttributes {
      'errorMessage'?: string;
      'inputClass'?: string;
      'inputId'?: string;
      'inputMinLength'?: number;
      'inputName'?: string;
      'inputPattern'?: string;
      'inputPlaceholder'?: string;
    }
  }
}

declare global { namespace JSX { interface StencilJSX {} } }

export declare function defineCustomElements(window: any): void;